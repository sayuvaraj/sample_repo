For X-Mas, santa claus is preparing a X-Mas Tree with set of Bulbs.
The bulbs are of different voltages, and preparation of tree as follows:
	- The bulbs are arranged in level-wise, levels are numbered from 0,1,2,3..
	  so on.
	- At level-0: There will be only one bulb as root bulb.,
	- From next level onwards, we can attach atmost two bulbs to left side,
	  and right side of every bulb in previous level.
	- The empty attachements in each level are indicated with -1. 
	(for example: look in hint)

You will be given the root of the X-Mas Tree,
Your task is to findout the bulb with highest voltage in each level.

Implement the class Solution:
1.public List<Integer> maxInEachRow(BinaryTreeNode root): returns the list of integers.


Input Format:
-------------
A single line of space separated integers, voltages of the set of bulbs.

Output Format:
--------------
Print the list of voltages.


Sample Input-1:
---------------
2 4 3 6 4 -1 9

Sample Output-1:
----------------
[2, 4, 9]


Sample Input-2:
---------------
3 4 7 7 3 8 4 

Sample Output-2:
----------------
[3, 4, 8]


Solution


//TreeNode Structure for Your Reference..
import java.util.*;
/*class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}*/


class Solution {
    public List<Integer> maxInEachRow(BinaryTreeNode root) {
        // Implement Your Code here..
        List<Integer>l=new ArrayList<>();
        Queue<BinaryTreeNode>q1=new LinkedList<>();
        if(root!=null)
        {
            q1.add(root);
        }
        if(root==null)
        return l;
      while(!q1.isEmpty()){
          int si=q1.size();
          int maxi=-29000;
          for(int i=0;i<si;i++){
              BinaryTreeNode curr=q1.poll();
              maxi=Math.max(maxi,curr.data);
              if(curr.left!=null){
                  q1.add(curr.left);
              }
              if(curr.right!=null){
                  q1.add(curr.right);
              }
          }
          l.add(maxi);
      }
      return l;
    }
}



